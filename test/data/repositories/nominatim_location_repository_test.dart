import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:kursova/core/errors/location_exception.dart';
import 'package:kursova/core/errors/nominatim_exception.dart';
import 'package:kursova/data/datasources/nominatim_datasource.dart';
import 'package:kursova/data/models/nominatim_response_model.dart';
import 'package:kursova/data/repositories/nominatim_location_repository.dart';
import 'package:kursova/domain/entities/location.dart';
import 'package:latlong2/latlong.dart';
import 'package:logger/logger.dart';
import 'package:mocktail/mocktail.dart';

class MockNominatimDatasouce extends Mock implements NominatimDatasouce {}

void main() {
  group(
    'NominatimLocationRepository ->',
    () {
      late NominatimLocationRepository nominatimLocationRepository;
      late MockNominatimDatasouce mockNominatimDatasouce;
      late LatLng mockCoordinate;
      late String mockAddress;
      late String mockLang;
      late NominatimResponseModel mockNominatimResponseModelFromCoordinates;
      late NominatimResponseModel mockNominatimResponseModelFromAddress;

      setUp(() {
        mockNominatimDatasouce = MockNominatimDatasouce();
        nominatimLocationRepository = NominatimLocationRepository(
          nominatimDatasouce: mockNominatimDatasouce,
          logger: Logger(),
        );

        mockCoordinate = const LatLng(48.136691343766316, 11.577186091868162);
        mockAddress = 'Paris';
        mockLang = 'en';
        mockNominatimResponseModelFromCoordinates = NominatimResponseModel(
          city: 'Munich',
          neighbourhood: 'Graggenau',
          road: 'Marienplatz',
          houseNumber: '15',
          countryCode: 'de',
          latitude: 48.136817,
          longitude: 11.57705941457272,
        );
        mockNominatimResponseModelFromAddress = NominatimResponseModel(
          city: 'Paris',
          neighbourhood: null,
          road: null,
          houseNumber: null,
          countryCode: 'fr',
          latitude: 48.8534951,
          longitude: 2.3483915,
        );
      });

      group(
        'retrieveLocationByCoordinates function',
        () {
          test(
            'should return Location when request to datasource is successful',
            () async {
              when(
                () => mockNominatimDatasouce.retrieveAddressDataByCoordinates(
                  latitude: mockCoordinate.latitude,
                  longitude: mockCoordinate.longitude,
                  lang: mockLang,
                ),
              ).thenAnswer((_) async {
                return mockNominatimResponseModelFromCoordinates;
              });

              final nominatimResponseModel = await nominatimLocationRepository
                  .retrieveLocationByCoordinates(
                latLng: mockCoordinate,
                lang: mockLang,
              );

              expect(nominatimResponseModel, isA<Location>());
            },
          );

          test(
            'should return autogenerated Location when request to datasource failed',
            () async {
              when(
                () => mockNominatimDatasouce.retrieveAddressDataByCoordinates(
                  latitude: mockCoordinate.latitude,
                  longitude: mockCoordinate.longitude,
                  lang: mockLang,
                ),
              ).thenAnswer((_) async {
                throw RetrievingAddressDataByCoordinatesNominatimException();
              });

              final nominatimResponseModel = await nominatimLocationRepository
                  .retrieveLocationByCoordinates(
                latLng: mockCoordinate,
                lang: mockLang,
              );

              expect(nominatimResponseModel, isA<Location>());
              expect(
                nominatimResponseModel.primaryLocationName,
                'point'.tr(args: [1.toString()]),
              );
            },
          );
        },
      );

      group(
        'retrieveLocationByAddress function',
        () {
          test(
            'should return Location when request to datasource is successful',
            () async {
              when(
                () => mockNominatimDatasouce.retrieveAddressDataByAdress(
                  address: mockAddress,
                  lang: mockLang,
                ),
              ).thenAnswer((_) async {
                return mockNominatimResponseModelFromAddress;
              });

              final nominatimResponseModel =
                  await nominatimLocationRepository.retrieveLocationByAddress(
                address: mockAddress,
                lang: mockLang,
              );

              expect(nominatimResponseModel, isA<Location>());
            },
          );

          test(
            'should throw NominatimException when request to datasource failed',
            () async {
              when(
                () => mockNominatimDatasouce.retrieveAddressDataByAdress(
                  address: mockAddress,
                  lang: mockLang,
                ),
              ).thenAnswer((_) async {
                throw RetrievingAddressDataByAddressNominatimException();
              });

              final nominatimResponseModel =
                  nominatimLocationRepository.retrieveLocationByAddress(
                address: mockAddress,
                lang: mockLang,
              );

              expect(
                nominatimResponseModel,
                throwsA(isA<LocationException>()),
              );
            },
          );
        },
      );
    },
  );
}
